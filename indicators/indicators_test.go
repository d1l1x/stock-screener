package indicators

import (
	"github.com/d1l1x/stock-screener/providers"
	"testing"
	// "fmt"
)

var ACC = 1e-4
var TESTPERIOD = 5

var TestBars = providers.BarHistory{
	Open: []float64{
		126.51423645019500, 128.61257934570300, 129.03817749023400, 128.47401428222700,
		129.37472534179700, 128.96890258789100, 130.78021240234400, 132.40345764160200,
		133.07650756835900, 132.0966339111330, 132.04713439941400, 133.4229278564450,
		134.7789306640630, 135.2045440673830, 136.4912567138670, 138.63909912109400,
		142.06869506835900, 140.1336669921880, 141.29171752929700, 144.7163848876950,
		142.5586395263670, 146.58706665039100, 147.71542358398400, 146.94338989257800,
		142.281494140625, 141.99447631835900, 144.04331970214800, 144.44418334960900,
		146.0426788330080, 146.7553253173830, 147.5966339111330, 143.33067321777300,
	},
	High: []float64{
		129.20643615722700, 129.26583862304700, 129.55287170410200, 131.1959228515630,
		130.16653442382800, 131.05735778808600, 132.7102813720700, 132.94784545898400,
		133.2645721435550, 132.52223205566400, 133.86338806152300, 135.09567260742200,
		136.0062713623050, 135.92709350585900, 138.56980895996100, 141.6876220703130,
		143.40985107421900, 142.5883331298830, 144.16207885742200, 144.82525634765600,
		145.95361328125, 148.04205322265600, 148.4676513671880, 148.2301025390630,
		142.59823608398400, 145.59698486328100, 144.63719177246100, 146.6811065673830,
		147.19845581054700, 148.2993927001950, 147.68572998046900, 145.46861267089800,
	},
	Low: []float64{
		125.77189636230500, 128.0681915283200, 127.14868927002000, 128.32553100585900,
		128.90951538085900, 127.89004516601600, 130.27540588378900, 131.8689727783200,
		131.572021484375, 131.45326232910200, 131.9877471923830, 132.9775390625,
		134.48199462890600, 134.3731231689450, 136.3378448486330, 138.63909912109400,
		141.20263671875, 139.22801208496100, 141.19491577148400, 142.52894592285200,
		142.16273498535200, 146.1713409423830, 145.58737182617200, 144.38973999023400,
		140.22274780273400, 141.49957275390600, 143.1525115966800, 144.32044982910200,
		145.4191131591800, 146.19114685058600, 144.0631103515630, 141.0838623046880,
	},
	Close: []float64{
		129.14706420898400, 128.31564331054700, 128.8204345703130, 130.4436798095700,
		129.1272735595700, 130.94847106933600, 132.61129760742200, 132.33416748046900,
		132.04713439941400, 131.7501983642580, 133.40313720703100, 134.9373016357420,
		135.5608673095700, 135.86770629882800, 138.5302276611330, 140.56918334960900,
		143.0931396484380, 141.77671813964800, 143.6276092529300, 143.02383422851600,
		144.15219116210900, 147.62632751464800, 146.9631805419920, 144.89453125,
		140.99478149414100, 144.656982421875, 143.91464233398400, 145.30035400390600,
		147.0423583984380, 147.4679718017580, 145.27066040039100, 143.49893188476600,
	},
	Volume: []int64{
		97906664, 63393940, 92762656, 97719944, 110077824, 80485520, 75555464,
		60835676, 69420168, 71514312, 62752360, 65222368, 63914316, 53027488,
		79760368, 109298344, 105994392, 106665112, 100921784, 77087216,
		101867744, 128362088, 107922800, 94213880, 122687904, 97344472,
		75767472, 78136376, 72184832, 73181688, 105900416, 120158688,
	},
}

// Moving average
func TestSma(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 129.1708190917970, 129.53110046386700, 130.39023132324200, 131.09297790527300, 131.41366882324200, 131.9382537841800, 132.42918701171900, 132.8943878173830, 133.53972778320300, 134.30384216308600, 135.65984802246100, 137.09305725097700, 138.72422485351600, 139.96739501953100, 141.51937561035200, 142.41809692382800, 143.13469848632800, 144.0413360595700, 145.07862854003900, 145.33201293945300, 144.92620239257800, 145.02716064453100, 144.28482360839800, 143.95225830078100, 144.38182373046900, 145.67646179199200, 145.7991973876950, 145.71605529785200}

	got, err := MA(TestBars.Close, TESTPERIOD, SMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestEma(t *testing.T) {
	want := []float64{129.14706420898400, 128.86992390950500, 128.85342746310800, 129.3835115785950, 129.2980989055870, 129.84822296017000, 130.76924784258700, 131.2908877218810, 131.54296994772500, 131.61204608657000, 132.2090764600570, 133.11848485195200, 133.93261233782500, 134.5776436581590, 135.8951716591500, 137.45317555597000, 139.33316358679300, 140.14768177107800, 141.3076575983620, 141.87971647508000, 142.63720803742300, 144.30024786316500, 145.18789208944100, 145.09010514296000, 143.72499726002000, 144.03565898063900, 143.99532009842100, 144.43033140024900, 145.3010070663120, 146.02332864479400, 145.77243922999300, 145.0146034482500}

	got, err := MA(TestBars.Close, TESTPERIOD, EMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestComputeLwmaWeights1(t *testing.T) {
	want := []float64{1.0}
	got := computeLwmaWeights(1)

	_, err := sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}
func TestComputeLwmaWeights5(t *testing.T) {
	want := []float64{5.0 / 15.0,
		4.0 / 15.0,
		3.0 / 15.0,
		2.0 / 15.0,
		1.0 / 15.0}
	got := computeLwmaWeights(TESTPERIOD)

	_, err := sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestLwma(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 129.31004943847700, 129.90260009765600, 130.92933247884100, 131.57731119791700, 131.8953633626300, 132.0075398763020, 132.49583435058600, 133.33187255859400, 134.22069905599000, 134.99669189453100, 136.40548706054700, 138.04193216959600, 140.04195963541700, 141.05945739746100, 142.27952880859400, 142.7810150146480, 143.35904642740900, 144.85625610351600, 145.8302042643230, 145.76883850097700, 144.3230946858720, 144.233354695638, 143.86251525878900, 144.201025390625, 145.2310587565100, 146.25977478027300, 146.12450764974000, 145.35775248209600}

	got, err := MA(TestBars.Close, TESTPERIOD, LWMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestWilderMA(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 129.1708190917970, 129.52634948730500, 130.14333911132800, 130.58150478515600, 130.87463070800800, 131.04974423925800, 131.5204228328130, 132.20379859339800, 132.8752123366330, 133.4737111290720, 134.48501443548400, 135.70184821830900, 137.1801065043350, 138.09942883139800, 139.20506491570400, 139.9688187782660, 140.80549325503500, 142.16966010695800, 143.12836419396500, 143.48159760517200, 142.98423438296500, 143.31878399074700, 143.43795565939500, 143.81043532829700, 144.45681994232500, 145.05905031421200, 145.10137233144700, 144.78088424211100}

	got, err := MA(TestBars.Close, TESTPERIOD, WILDER)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

// RSI
func TestRSI(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 0.0, 67.78115545017400, 75.57844200494920, 71.95086723077780, 67.74136625223780, 62.97687377547850, 75.14230376246180, 82.00313082238280, 84.216434549137, 85.32642287480910, 91.67594306166710, 94.11402390768810, 95.9496658449414, 79.73705928329040, 84.37664820463020, 77.1715707202275, 80.96805008125100, 88.39552173112490, 80.86553635442170, 60.70244408751380, 38.236271644787700, 56.94252794984710, 52.8841745284969, 59.602321535495700, 66.99704462357330, 68.74435492312840, 51.23800087313730, 40.772853432675}

	got := RSI(TestBars.Close, TESTPERIOD)
	_, err := sliceAlmostEqual(got, want, 1)
	if err != nil {
		t.Fatal(err)
	}
}

// ROC
func TestROC(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 0.0, 1.394849252969890, 3.3477245533334900, 2.727620755104950, 1.229231337374540, 2.0312709564625600, 1.874528291663370, 1.7540014088438800, 2.4382968439181000, 2.893339500922180, 5.146124545581220, 5.371722354217950, 6.0441685981772900, 4.5852840524274800, 5.7113667150856300, 3.2437733217149500, 2.548928383249330, 3.167998044733950, 3.658190477533240, 0.8820880634720110, -1.4186815402620900, 0.3501793872823950, -2.5142433894765600, -1.1314579148011900, 1.4823383118108600, 4.591085030963500, 0.4242297663350310, -0.2888590364933210}

	got := ROC(TestBars.Close, TESTPERIOD)
	_, err := sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

// True Range
func TestTR(t *testing.T) {
	want := []float64{
		3.434539794921880, 1.1976470947265600, 2.4041824340820300, 2.870391845703130,
		1.5341644287109400, 3.1673126220703100, 2.43487548828125, 1.0788726806640600,
		1.6925506591796900, 1.0689697265625, 2.113189697265630, 2.118133544921880,
		1.5242767333984400, 1.5539703369140600, 2.7021026611328100, 3.1573944091796900,
		2.840667724609380, 3.8651275634765600, 2.9671630859375, 2.2963104248046900,
		3.7908782958984400, 3.889862060546880, 2.880279541015630, 3.840362548828130,
		4.671783447265630, 4.602203369140630, 1.5044708251953100, 2.7664642333984400,
		1.898101806640630, 2.108245849609380, 3.62261962890625, 4.3847503662109400,
	}

	got := TR(TestBars)

	_, err := sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestATR(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 2.2881851196289100, 2.4640106201171900, 2.45818359375, 2.182321411132810, 2.0843672607421900, 1.8812877539062500, 1.9276681425781200, 1.965761223046880, 1.8774643251171900, 1.8127655274765600, 1.9906329542078100, 2.2239852452021900, 2.3473217410836200, 2.650882905562210, 2.7141389416372700, 2.6305732382707500, 2.86263424979629, 3.068079811946410, 3.0305197577602500, 3.1924883159738300, 3.488347342232190, 3.7111185476138700, 3.2697890031301600, 3.1691240491838200, 2.9149196006751800, 2.7535848504620200, 2.9273918061508600, 3.218863518162880}

	got := ATR(TestBars, TESTPERIOD)

	_, err := sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestATRP(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 1.7720385915012000, 1.8816642913016700, 1.8536758467043500, 1.6490989837941100, 1.5785024568859100, 1.427920243964220, 1.4449946102740700, 1.4567960076401800, 1.3849603962991500, 1.33421368245487, 1.4369664930293900, 1.5821285947652700, 1.6404152895454700, 1.8697589705462900, 1.889705576633000, 1.8392551510455000, 1.9858416488286700, 2.0782741558357700, 2.0620945644915, 2.2033187094311600, 2.4740967752605500, 2.5654610551676200, 2.2720335819213800, 2.181084878223090, 1.9823672800300700, 1.8672426404315600, 2.015129412974700, 2.2431271619134600}

	got := ATRP(TestBars, TESTPERIOD)

	_, err := sliceAlmostEqual(got, want, ACC)
	if err != nil {
		t.Fatal(err)
	}
}

func TestADX(t *testing.T) {
	want := []float64{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 32.6, 38.08, 45.064, 51.85120000000000, 56.28096000000000, 62.224768, 67.9798144, 73.18385152000000, 67.547081216, 65.4376649728, 64.35013197824, 64.880105582592, 67.1040844660736, 65.48326757285890, 58.7866140582871, 52.22929124662970, 43.583432997303700, 36.866746397843000, 35.6933971182744, 35.55471769461950, 37.64377415569560, 31.315019324556500, 30.652015459645200}

	got := ADX(TestBars, TESTPERIOD)

	_, err := sliceAlmostEqual(got, want, 1)
	if err != nil {
		t.Fatal(err)
	}
}

func TestCheckInputZeroPeriod(t *testing.T) {
	input := []float64{1, 2, 3}
	period := 0

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for invalid period: %v ", err)
	}
}

func TestCheckInputNegativePeriod(t *testing.T) {
	input := []float64{1, 2, 3}
	period := -2

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for invalid period: %v ", err)
	}
}

func TestCheckInputPeriodToLarge(t *testing.T) {
	input := []float64{1, 2, 3}
	period := 10

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for invalid period: %v ", err)
	}
}

func TestCheckInputUninitializedInput(t *testing.T) {
	var input []float64
	period := 0

	err := CheckInput(input, period)
	if err == nil {
		t.Errorf("Want error for uninitialized input: %v ", err)
	}
}

func TestSliceAlmostEqualUnequalLength(t *testing.T) {
	a := []float64{1, 2}
	b := []float64{1, 2, 3}

	_, err := sliceAlmostEqual(a, b, 1e-9)
	if err == nil {
		t.Errorf("Want error for unequal length: %v ", err)
	}
}

func TestSliceAlmostEqualNotEqual(t *testing.T) {
	a := []float64{1, 2, 4}
	b := []float64{1, 2, 3}

	_, err := sliceAlmostEqual(a, b, 1e-9)
	if err == nil {
		t.Errorf("Want error for not equal: %v ", err)
	}
}

func TestSliceAlmostEqualIsEqual(t *testing.T) {
	a := []float64{1, 2, 3}
	b := []float64{1, 2, 3}

	_, err := sliceAlmostEqual(a, b, 1e-9)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
}

func TestBBBadFactor(t *testing.T) {
	input := []float64{90.7043, 92.9001, 92.9784, 91.8021, 92.6647, 92.6843, 92.3021, 92.7725, 92.5373, 92.9490, 93.2039, 91.0669, 89.8318, 89.7435, 90.3994, 90.7387, 88.0177, 88.0867, 88.8439, 90.7781, 90.5416, 91.3894, 90.6500}
	period := 5

	_, err := BB(input, period, -1.0, SMA)
	if err == nil {
		t.Errorf("Want error for bad factor: %v ", err)
	}

}

func TestBBPeriod5F0(t *testing.T) {
	input := []float64{90.7043, 92.9001, 92.9784, 91.8021, 92.6647, 92.6843, 92.3021, 92.7725, 92.5373, 92.9490, 93.2039, 91.0669, 89.8318, 89.7435, 90.3994, 90.7387, 88.0177, 88.0867, 88.8439, 90.7781, 90.5416, 91.3894, 90.6500}
	period := 5
	want := BBands{mean: []float64{0, 0, 0, 0, 92.209920, 92.605920, 92.486320, 92.445140, 92.592180, 92.649040, 92.752960, 92.505920, 91.917780, 91.359020, 90.849100, 90.356060, 89.746220, 89.397200, 89.217280, 89.293020, 89.253600, 89.927940, 90.440600},
		upper:      []float64{0, 0, 0, 0, 92.209920, 92.605920, 92.486320, 92.445140, 92.592180, 92.649040, 92.752960, 92.505920, 91.917780, 91.359020, 90.849100, 90.356060, 89.746220, 89.397200, 89.217280, 89.293020, 89.253600, 89.927940, 90.440600},
		lower:      []float64{0, 0, 0, 0, 92.209920, 92.605920, 92.486320, 92.445140, 92.592180, 92.649040, 92.752960, 92.505920, 91.917780, 91.359020, 90.849100, 90.356060, 89.746220, 89.397200, 89.217280, 89.293020, 89.253600, 89.927940, 90.440600},
		band_width: []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	}

	got, err := BB(input, period, 0.0, SMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
	_, err = sliceAlmostEqual(got.mean, want.mean, ACC, "BB.mean: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.upper, want.upper, ACC, "BB.upper: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.lower, want.lower, ACC, "BB.lower: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.band_width, want.band_width, ACC, "BB.band_width: ")
	if err != nil {
		t.Fatal(err)
	}
}

func TestBBPeriod5F2(t *testing.T) {
	input := []float64{90.7043, 92.9001, 92.9784, 91.8021, 92.6647, 92.6843, 92.3021, 92.7725, 92.5373, 92.9490, 93.2039, 91.0669, 89.8318, 89.7435, 90.3994, 90.7387, 88.0177, 88.0867, 88.8439, 90.7781, 90.5416, 91.3894, 90.6500}
	period := 5
	want := BBands{mean: []float64{0, 0, 0, 0, 92.209920, 92.605920, 92.486320, 92.445140, 92.592180, 92.649040, 92.752960, 92.505920, 91.917780, 91.359020, 90.849100, 90.356060, 89.746220, 89.397200, 89.217280, 89.293020, 89.253600, 89.927940, 90.440600},
		upper:      []float64{0, 0, 0, 0, 93.931999, 93.445448, 93.293910, 93.164323, 92.918883, 93.086592, 93.380300, 94.009602, 94.475378, 94.320001, 93.387131, 91.377300, 91.623830, 91.685323, 91.509657, 91.755346, 91.626784, 92.426023, 92.141806},
		lower:      []float64{0, 0, 0, 0, 90.487841, 91.766392, 91.678730, 91.725957, 92.265477, 92.211488, 92.125620, 91.002238, 89.360182, 88.398039, 88.311069, 89.334820, 87.868610, 87.109077, 86.924903, 86.830694, 86.880416, 87.429857, 88.739394},
		band_width: []float64{0, 0, 0, 0, 3.444157, 1.679055, 1.615180, 1.438365, 0.653407, 0.875104, 1.254680, 3.007364, 5.115196, 5.921961, 5.076062, 2.042480, 3.755220, 4.576245, 4.584755, 4.924652, 4.746368, 4.996166, 3.402412},
	}

	got, err := BB(input, period, 2.0, SMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
	_, err = sliceAlmostEqual(got.mean, want.mean, ACC, "BB.mean: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.upper, want.upper, ACC, "BB.upper: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.lower, want.lower, ACC, "BB.lower: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.band_width, want.band_width, ACC, "BB.band_width: ")
	if err != nil {
		t.Fatal(err)
	}
}

func TestBBPeriod20F2(t *testing.T) {
	input := []float64{90.7043, 92.9001, 92.9784, 91.8021, 92.6647, 92.6843, 92.3021, 92.7725, 92.5373, 92.9490, 93.2039, 91.0669, 89.8318, 89.7435, 90.3994, 90.7387, 88.0177, 88.0867, 88.8439, 90.7781, 90.5416, 91.3894, 90.6500}
	period := 20
	want := BBands{mean: []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 91.250270, 91.242135, 91.166600, 91.050180},
		upper:      []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 94.534271, 94.532306, 94.369251, 94.148503},
		lower:      []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 87.966269, 87.951964, 87.963949, 87.951857},
		band_width: []float64{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.568003, 6.580342, 6.405301, 6.196647},
	}

	got, err := BB(input, period, 2.0, SMA)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
	_, err = sliceAlmostEqual(got.mean, want.mean, ACC, "BB.mean: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.upper, want.upper, ACC, "BB.upper: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.lower, want.lower, ACC, "BB.lower: ")
	if err != nil {
		t.Fatal(err)
	}
	_, err = sliceAlmostEqual(got.band_width, want.band_width, ACC, "BB.band_width: ")
	if err != nil {
		t.Fatal(err)
	}
}

func TestRslPeriod1(t *testing.T) {
	input := []float64{2, 4, 6, 8, 12, 14, 16, 18, 20}
	period := 1
	want := []float64{0, 4. / 3, 6. / 5, 8. / 7, 12. / 10, 14. / 13, 16. / 15, 18. / 17, 20. / 19}

	got, err := RSL(input, period)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
	_, err = sliceAlmostEqual(got, want, 1e-9)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRslPeriod2(t *testing.T) {
	input := []float64{2, 4, 6, 8, 12, 14, 16, 18, 20}
	period := 2
	want := []float64{0, 0, 6. / 4, 24. / 18, 36. / 26, 42. / 34, 48. / 42, 54. / 48, 60. / 54}

	got, err := RSL(input, period)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}
	_, err = sliceAlmostEqual(got, want, 1e-9)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRslPeriod3(t *testing.T) {
	input := []float64{2, 4, 6, 8, 12, 14, 16, 18, 20}
	period := 3
	want := []float64{0, 0, 0, 32. / 20, 48. / 30, 56. / 40, 64. / 50, 72. / 60, 80. / 68}

	got, err := RSL(input, period)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want, 1e-6)
	if err != nil {
		t.Fatal(err)
	}
}

func TestRslPeriod8(t *testing.T) {
	input := []float64{2, 4, 6, 8, 12, 14, 16, 18, 20}
	period := 8
	want := []float64{0, 0, 0, 0, 0, 0, 0, 0, 180. / 100}

	got, err := RSL(input, period)
	if err != nil {
		t.Fatalf("Unexpected error occurred: %v ", err)
	}

	_, err = sliceAlmostEqual(got, want, 1e-6)
	if err != nil {
		t.Fatal(err)
	}
}
